import { useCallback, useContext, useEffect, useState } from "react";
import "../../styles/Vulnerability/Description.scss";
import { AccordionContext } from "./VulnerabilityAccordion";
import MDEditor from '@uiw/react-md-editor';
import download from "downloadjs";
import classNames from "classnames";
import { Colors } from "constants/constants";
import { encryptWithKeys } from "./encrypt";
import { useVaults } from "hooks/useVaults";

export default function Description() {
  const { cards, setCards } = useContext(AccordionContext);
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const { vaults } = useVaults();
  const vault = vaults?.find(vault => vault.id === cards?.project?.projectId)!;

  const editorStyles = {
    color: Colors.white
  }

  useEffect(() => {
    setTitle(cards?.description?.title || "");
    setDescription(cards?.description?.description || "");
  }, [cards]);

  const handleSubmit = useCallback(async () => {
    if (!vault.description?.["communication-channel"]["pgp-pk"]) return;
    const keyOrKeys = vault.description?.["communication-channel"]["pgp-pk"]!;
    const textToDownload = `
    **Project Name:** ${cards?.project?.projectName}
    **Title:** ${title}
    **Description:** ${description}
    **Telegram username:** ${cards?.contact?.username}  
    **Beneficiary:** ${cards?.contact?.beneficiary}
    `;
    const { encryptedData, sessionKey } = await encryptWithKeys(keyOrKeys, textToDownload);
    download(JSON.stringify({ text: textToDownload, sessionKey }), `${title}.json`);
    setCards(prev => {
      if (!prev || !title || !description) return prev;
      return {
        ...prev,
        description: {
          verified: true,
          title, description,
          sessionKey,
          encryptedData: encryptedData as string
        }
      };
    })
  }, [cards, description, title, vault, setCards])

  return (
    <div className="description-wrapper">
      <input className={classNames({ "input-error": title === "" })} autoFocus type="text" placeholder="Title" onChange={(e) => setTitle(e.target.value)} value={title} />
      <MDEditor
        className={classNames({ "input-error": description === "" })}
        style={editorStyles}
        value={description}
        onChange={value => setDescription(value!)}
      />

      <button
        className="save-and-download-btn"
        disabled={title === "" || description === ""}
        onClick={handleSubmit}>SAVE AND DOWNLOAD</button>
    </div>
  )
}
